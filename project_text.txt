Ruby final project idea: Book library, User will be the Admin of their own Rubrary, creating, editing and checking out (deleting) books from their collection

User functionality: 

    - user will be able to sign in using OAuth or by entering email
    - User will be able to add books. User will be able to sort by genre using ActiveRecord Query methods (.where)
    - user can enter in book titles, authors, and genres of books.
    - ApplicationController will handle logins

x Models:
    
   x book
    belongs_to :author 
    belongs_to :favorites

   x favorites
   has_many :books 
   has_many :users, through: books


   x user 
    has_many :books 
    has_many :favorites, through: :books

Views
    Root
    - Sign up page 
    - Login page 


    User 
    - after successful login: give choice of books, author, or genre. links to each. button to add new book and button to logout 
    
    Book 
    - index of all Books with links to their show page allow to be ordered by either genre or alphabetise <-- main view after login. So add ability to view, add, edit, delete, and sign out here -->
    - show page will have genre and author 
    - new page will have form to create a new book. Requires author and genre. if author or genre not found, create them as well 
    - edit page will have form to edit book

    Genre 
    - Index will show all gernes 
    - show page will have all books or authors under that particular genre with a link to their page 

Controllers 

    Application <-- do this next
    - show a login/sign up page and allow OAuth logins
    - saves session 
    - deletes session on logout

    User 
    - create new book
    
    Book 
    - index to find all books, 
    - show to load specific book 
    - edit to edit book 
    - delete to delete the book 

    Genre 
    - index all genres 
    - show all authors or bookss associated with genre with links to either 


Things to remember: 
include and make use of a nested resource with the appropriate RESTful URLs. forms should correctly display validation errors.
sat-sun work on project nested routes are going to be a show page for all the books the user added and a new for where the user creates the book


To-Do 
EACH USER CAN ADD BOOKS BUT WONT BE ASSOCIATED WITH BOOK UNTIL THEY COMMENT 
comment inded route /user/:id/comment 
comment show route /user/:id/book/:id 
comment new route /book/:id/comment/new

xstandard user authentication
o Check OAuth logins, give github like a day to validate the application  
- May need to refactor the project. Take out favorites and put in comments/reviews. 
-nested route to view all user's favorite books (/users/:id/books) returns all books .WHERE -favorites = true 
-form validations and displaying validation errors